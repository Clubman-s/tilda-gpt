import { createServer } from 'http';
import { Readable } from 'stream';
import fs from 'fs';
import pdfParse from 'pdf-parse';
import mammoth from 'mammoth';
import formidable from 'formidable';
import { createClient } from '@supabase/supabase-js';

export const config = {
  api: { bodyParser: false }
};

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è form
const parseForm = async (req) => {
  const form = formidable();
  return new Promise((resolve, reject) => {
    form.parse(req, (err, fields, files) => {
      if (err) reject(err);
      else resolve({ fields, files });
    });
  });
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  try {
    const { files } = await parseForm(req);
    const file = files.file;

    console.log('üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', file?.originalFilename || '–Ω–µ—Ç –∏–º–µ–Ω–∏');
    if (!file) return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω' });

    const ext = file.originalFilename.split('.').pop().toLowerCase();
    let text = '';

    if (ext === 'pdf') {
      const buffer = fs.readFileSync(file.filepath);
      const data = await pdfParse(buffer);
      text = data.text;
    } else if (ext === 'txt') {
      text = fs.readFileSync(file.filepath, 'utf-8');
    } else if (ext === 'docx') {
      const result = await mammoth.extractRawText({ path: file.filepath });
      text = result.value;
    } else {
      return res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞' });
    }

    console.log('üìù –ò–∑–≤–ª–µ—á—ë–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π:', text.length);

    const { error } = await supabase.from('documents').insert([
      {
        content: text,
        embedding: null
      }
    ]);

    if (error) {
      console.error('‚ùå Supabase –æ—à–∏–±–∫–∞:', error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ Supabase', details: error.message });
    }

    res.status(200).json({ message: `‚úÖ –§–∞–π–ª ${file.originalFilename} –∑–∞–≥—Ä—É–∂–µ–Ω` });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞', details: err.message });
  }
}
