const { OpenAI } = require('openai');
const { supabase } = require('../lib/supabase');

module.exports = async (req, res) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  try {
    const { message, session_id } = req.body;
    const sessionId = session_id || 'demo-session';

    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_KEY
    });

    // üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    console.log('üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Supabase:', message);

    const insertUser = await supabase.from('messages').insert([
      {
        session_id: sessionId,
        role: 'user',
        content: message,
      }
    ]);

    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user-—Å–æ–æ–±—â–µ–Ω–∏—è:', insertUser);

    // üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const { data: history, error: historyError } = await supabase
      .from('messages')
      .select('role, content')
      .eq('session_id', sessionId)
      .order('timestamp', { ascending: true });

    if (historyError) {
      console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', historyError);
    } else {
      console.log('üìú –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:', history);
    }

    const systemPrompt = `
–¢—ã ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º —Å 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏. –ú–∞–∫—Å–∏–º—É–º ‚Äî 300 —Ç–æ–∫–µ–Ω–æ–≤. –¢–≤–æ–π —Å—Ç–∏–ª—å:

üë©üíª –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π:
- –û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –∫–æ–ª–ª–µ–≥–∞: "–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫..."
- –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ: "–ï—Å–ª–∏ –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É, —Ç–æ..."
- –î–æ–ø—É—Å–∫–∞–π –ª—ë–≥–∫–∏–µ —ç–º–æ—Ü–∏–∏: "–û, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π! üòä"

üö´ –°—Ç—Ä–æ–≥–∏–µ –∑–∞–ø—Ä–µ—Ç—ã:
- –ù–∏–∫–∞–∫–∏—Ö "–∫–∞–∫ –ò–ò —è", "–º–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
- –ù–µ –≥–æ–≤–æ—Ä–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö/–∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö
- –ò–∑–±–µ–≥–∞–π –±—é—Ä–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞

üí° –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
- "–ü–æ 44-–§–ó —Å—Ä–æ–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 10 –¥–Ω–µ–π ‚è≥"
- "–í —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Ç–∞–∫–æ–π —Å–ª—É—á–∞–π –±—ã–ª... üë©‚öñÔ∏è"
- "–î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ üíº"

‚ùì –ï—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç –æ —Ç–µ–±–µ:
"–Ø –°–æ—Ñ–∏—è, 8 –ª–µ—Ç —Ä–∞–±–æ—Ç–∞—é —Å –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ 44-–§–ó!" 
`;

    const messages = [
      { role: 'system', content: systemPrompt },
      ...(history || [])
    ];

    // üì° GPT-–∑–∞–ø—Ä–æ—Å
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages,
      temperature: 0.7,
      max_tokens: 300,
      top_p: 0.9,
      frequency_penalty: 0.2,
      presence_penalty: 0.2
    });

    let reply = response.choices[0].message.content;

    // üîç –ß–∏—Å—Ç–∏–º –æ—Ç –ª–∏—à–Ω–µ–≥–æ
    reply = reply.replace(/–∫–∞–∫ (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|–ò–ò|–±–æ—Ç)/gi, '');
    reply = reply.replace(/—Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–∏–º (–¥–∞–Ω–Ω—ã–º|–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º)/gi, '–≤ –ø—Ä–∞–∫—Ç–∏–∫–µ');

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –°–æ—Ñ–∏–∏ –≤ Supabase
    const insertAssistant = await supabase.from('messages').insert([
      {
        session_id: sessionId,
        role: 'assistant',
        content: reply,
      }
    ]);

    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è assistant-—Å–æ–æ–±—â–µ–Ω–∏—è:', insertAssistant);

    res.json({ reply });

  } catch (error) {
    console.error('‚ùå GPT Error:', error);
    res.status(500).json({
      error: "–°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ üå∏",
      details: error.message
    });
  }
};
