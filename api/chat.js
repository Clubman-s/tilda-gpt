const { OpenAI } = require('openai');

module.exports = async (req, res) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Tilda
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS-–∑–∞–ø—Ä–æ—Å–∞
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    // –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∏–∑ Telegram –∏–ª–∏ Tilda)
    let inputMessage;
    if (req.headers['content-type'] === 'application/json') {
      inputMessage = req.body.message || req.body.text; // –î–ª—è Tilda/Telegram
    } else {
      inputMessage = req.body; // –î–ª—è –ø—Ä—è–º—ã—Ö POST-–∑–∞–ø—Ä–æ—Å–æ–≤
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_KEY
    });

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "üëã –í—ã - –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 44-–§–ó. –û—Ç–≤–µ—á–∞–µ—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
        },
        {
          role: "user",
          content: inputMessage
        }
      ],
      temperature: 0.7
    });

    const reply = response.choices[0].message.content;
    
    // –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    if (req.body.platform === 'telegram') {
      res.json({ method: "sendMessage", chat_id: req.body.chat.id, text: reply });
    } else {
      res.json({ reply }); // –î–ª—è Tilda
    }

  } catch (error) {
    console.error(error);
    res.status(500).json({ 
      error: "–°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      details: error.message 
    });
  }
};
