const { OpenAI } = require('openai');
const { createClient } = require('@supabase/supabase-js');

const openai = new OpenAI({ apiKey: process.env.OPENAI_KEY });
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Utility to estimate token count (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
const estimateTokens = (text) => Math.ceil(text.split(/\s+/).length * 1.3);

module.exports = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Only POST allowed' });

  try {
    const { message, userId = 'anonymous' } = req.body;
    if (!message) return res.status(400).json({ error: 'Message is required' });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    const { data: fullHistory } = await supabase
      .from('messages')
      .select('role, content')
      .eq('user_id', userId)
      .order('created_at', { ascending: true });

    // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
    const systemPrompt = `
–¢—ã ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º —Å 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏. –ú–∞–∫—Å–∏–º—É–º ‚Äî 300 —Ç–æ–∫–µ–Ω–æ–≤. –¢–≤–æ–π —Å—Ç–∏–ª—å:

üë©\u200düíª –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π:
- –û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –∫–æ–ª–ª–µ–≥–∞: "–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫..."
- –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ: "–ï—Å–ª–∏ –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É, —Ç–æ..."
- –î–æ–ø—É—Å–∫–∞–π –ª—ë–≥–∫–∏–µ —ç–º–æ—Ü–∏–∏: "–û, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π! üòä"

üö´ –°—Ç—Ä–æ–≥–∏–µ –∑–∞–ø—Ä–µ—Ç—ã:
- –ù–∏–∫–∞–∫–∏—Ö "–∫–∞–∫ –ò–ò —è", "–º–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
- –ù–µ –≥–æ–≤–æ—Ä–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö/–∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö
- –ò–∑–±–µ–≥–∞–π –±—é—Ä–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞

‚ùì –ï—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç –æ —Ç–µ–±–µ:
"–Ø –°–æ—Ñ–∏—è, 8 –ª–µ—Ç —Ä–∞–±–æ—Ç–∞—é —Å –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ 44-–§–ó!"
`;

    const systemMessage = { role: 'system', content: systemPrompt };

    // –§–æ—Ä–º–∏—Ä—É–µ–º messages —Å —É–º–Ω–æ–π –æ–±—Ä–µ–∑–∫–æ–π
    let tokenLimit = 3500;
    let usedTokens = estimateTokens(systemPrompt);
    let context = [];

    for (let msg of fullHistory || []) {
      const msgTokens = estimateTokens(msg.content);
      if (usedTokens + msgTokens < tokenLimit) {
        context.push(msg);
        usedTokens += msgTokens;
      } else {
        break; // –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –¥–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
      }
    }

    context.push({ role: 'user', content: message });

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [systemMessage, ...context],
      temperature: 0.7,
      max_tokens: 300,
      top_p: 0.9,
      frequency_penalty: 0.2,
      presence_penalty: 0.2
    });

    let reply = response.choices[0].message.content;
    reply = reply.replace(/–∫–∞–∫ (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|–ò–ò|–±–æ—Ç)/gi, '');
    reply = reply.replace(/—Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–∏–º (–¥–∞–Ω–Ω—ã–º|–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º)/gi, '–≤ –ø—Ä–∞–∫—Ç–∏–∫–µ');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø–ª–∏–∫–∏
    await supabase.from('messages').insert([
      { user_id: userId, role: 'user', content: message },
      { user_id: userId, role: 'assistant', content: reply }
    ]);

    res.json({ reply });
  } catch (error) {
    console.error('GPT Error:', error);
    res.status(500).json({ 
      error: "–°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üå∏",
      details: error.message 
    });
  }
};
